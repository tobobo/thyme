{
  "name": "lift-result",
  "version": "0.1.4",
  "description": "lift functions so they can handle Results as if they were plain values",
  "dependencies": {
    "result-type": "1.0.0",
    "result": "~1.0.1"
  },
  "devDependencies": {
    "serve": "jkroso/serve",
    "b": "vesln/b#fc64f24",
    "chai-spies": "*",
    "mocha": "*",
    "jsmd": "*",
    "chai": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jkroso/lift-result.git"
  },
  "bugs": {
    "url": "https://github.com/jkroso/lift-result/issues"
  },
  "keywords": [
    "result",
    "promise",
    "decorate",
    "function"
  ],
  "author": {
    "name": "Jake Rosoman"
  },
  "license": "MIT",
  "readme": "\n# lift-result\n\n  lift functions so they can handle [results](//github.com/jkroso/result) as if they were plain values.\n\n## Installation\n\nWith your favourite package manager:\n\n- [packin](//github.com/jkroso/packin): `packin add lift-result`\n- [component](//github.com/component/component#installing-packages): `component install jkroso/lift-result`\n- [npm](//npmjs.org/doc/cli/npm-install.html): `npm install lift-result`\n\nthen in your app:\n\n```js\nvar lift = require('lift-result')\nvar liftCPS = require('lift-result/cps')\nvar apply = require('lift-result/apply')\nvar sexpr = require('lift-result/sexpr')\n```\n\n## API\n\n### lift(fn)\n\n  decorate `fn` so it can receive promises as arguments. Return\n  values will be unboxed wherever possible however errors will\n  be caught and boxed with a promise since this means you don't\n  have to handle sync and async errors separately.\n\n```js\nvar Result = require('result')\nvar add = lift(function(a, b){ return a + b })\nadd(1, 2) // => 3\nadd(Result.wrap(1), 2) // => 3\nvar one = new Result\nvar answer = add(one, 2) // => new Result\none.write(1)\nanswer.value // => 3\n```\n\n### cps(fn)\n\n  decorate a node function so it can reciece Results as arguments and will return a result rather than take a callback as its last argument.\n\n```js\nvar fs = require('fs')\nvar readFile = liftCPS(fs.readFile)\nreadFile('Readme.md').read(function(buf){\n  buf // => fs.readFileSync('Readme.md')\n})\n```\n\n### apply(..., fn)\n\n  apply arguments to the last argument\n\n```js\napply(Result.wrap(1), 2, Array) // => [1, 2]\n```\n\n### sexpr(fn, ...)\n\n  apply rest of args to `fn`\n\n```js\nsexpr(Array, Result.wrap(1), 2) // => [1, 2]\n```",
  "readmeFilename": "Readme.md",
  "homepage": "https://github.com/jkroso/lift-result",
  "_id": "lift-result@0.1.4",
  "dist": {
    "shasum": "12e0b7223458bdf3737f8f5dbe047a6c15042117"
  },
  "_from": "lift-result@~0.1.4",
  "_resolved": "https://registry.npmjs.org/lift-result/-/lift-result-0.1.4.tgz"
}
